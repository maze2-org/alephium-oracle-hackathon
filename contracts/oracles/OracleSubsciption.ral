Contract OracleSubscription (
    operator: OracleOperator,
    subscriptionId: U256,
    priceRequestTemplateId: ByteVec,
    subscriptionAllowedConsumerTemplateId: ByteVec,
    mut owner: Address,
    mut requestId: U256
) {
    event NewAllowedCaller(subscriptionContractId: ByteVec, address: Address, deployedContractId: ByteVec)
    event RemovedAllowedCaller(subscriptionContractId: ByteVec, address: Address)

    enum ErrorCodes {
        InvalidCaller = 1
    }

    pub fn getSubscriptionId() -> U256 {
        return subscriptionId
    }

    pub fn getOwner() -> Address {
        return owner
    }

    pub fn isConsumerAddressAllowed(address: Address) -> Bool {
        let path = toByteVec!(address)
        let consumerSubcontractId = subContractId!(path)

        return contractExists!(consumerSubcontractId)
    }


    @using(preapprovedAssets = true)
    pub fn addAllowedCaller(consumerAddress: Address) -> () {
        checkCaller!(owner == callerAddress!(), ErrorCodes.InvalidCaller)

        emit Debug(`Adding new caller ${consumerAddress} to the list of allowed caller of subscription ${subscriptionId}`)

        let path = toByteVec!(consumerAddress)

        if (!isConsumerAddressAllowed(consumerAddress)) {
            let (encodedImmFields, encodedMutFields) = OracleSubscriptionAllowedConsumer.encodeFields!(consumerAddress, selfContract!())
            let contractId = copyCreateSubContract!{callerAddress!() -> ALPH: 1 alph}(
                path,
                subscriptionAllowedConsumerTemplateId,
                encodedImmFields,
                encodedMutFields
            )
            emit NewAllowedCaller(selfContractId!(), consumerAddress, contractId)
        }
    }
    
    
    pub fn removeAllowedCaller(consumerAddress: Address) -> () {
        checkCaller!(owner == callerAddress!(), ErrorCodes.InvalidCaller)

        emit Debug(`Remove caller ${consumerAddress}from the allowed caller of subscription ${subscriptionId}`)

        let path = toByteVec!(consumerAddress)

        if (isConsumerAddressAllowed(consumerAddress)) {
            let consumerSubcontractId = subContractId!(path)
            let consumer = OracleSubscriptionAllowedConsumer(consumerSubcontractId)

            consumer.destroy()
            emit RemovedAllowedCaller(selfContractId!(), consumerAddress)
        }
    }

    @using(updateFields = true)
    pub fn setOwner(newOwner: Address) -> () {
        checkCaller!(owner == callerAddress!(), ErrorCodes.InvalidCaller)
        owner = newOwner
    }

    pub fn getOperator() -> OracleOperator {
        return operator
    }

    pub fn destroyPriceRequest(priceRequest: OraclePriceRequest) -> () {
        checkCaller!(callerAddress!() == owner || isConsumerAddressAllowed(contractIdToAddress!(callerContractId!())), ErrorCodes.InvalidCaller)
        priceRequest.destroy()
    }

    @using(preapprovedAssets = true, updateFields = true)
    pub fn requestPrice(caller: Address, from: ByteVec, to: ByteVec) -> ByteVec {

        checkCaller!(callerAddress!() == owner || isConsumerAddressAllowed(contractIdToAddress!(callerContractId!())), ErrorCodes.InvalidCaller)

        emit Debug(`Balance in subscription request ${caller}`)
        emit Debug(`remaining tokens ${tokenRemaining!(caller, ALPH)}`)

        requestId = requestId + 1

        let (encodedImmFields, encodedMutFields) = OraclePriceRequest.encodeFields!(selfContract!(), from, to, operator.getFees(), 0, 8, false)
        
        // Requesting 1.5 alph to be sure to cover the 1 alph for storage + 0.5 to pay gas fees.The operator will take its comission when fulfilling the data
        let contractId = copyCreateSubContract!{caller -> ALPH: 1.5 alph + operator.getFees()}(
            u256To16Byte!(requestId),
            priceRequestTemplateId,
            encodedImmFields,
            encodedMutFields
        )

        operator.newPriceRequest(from, to, contractId)
        return contractId
    }
}