/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as OracleOperatorContractJson } from "../oracles/OracleOperator.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace OracleOperatorTypes {
  export type Fields = {
    publicKey: HexString;
    subscriptionTemplateId: HexString;
    priceRequestTemplateId: HexString;
    subscriptionAllowedConsumerTemplateId: HexString;
    subscriptionCount: bigint;
    fees: bigint;
    manager: Address;
  };

  export type State = ContractState<Fields>;

  export type AddedNewSubscriptionEvent = ContractEvent<{
    subscriptionId: bigint;
    contractId: HexString;
  }>;
  export type PriceRequestedEvent = ContractEvent<{
    from: HexString;
    to: HexString;
    contractId: HexString;
  }>;

  export interface CallMethodTable {
    getManager: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getPublicKey: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getFees: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  OracleOperatorInstance,
  OracleOperatorTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as OracleOperatorTypes.Fields;
  }

  eventIndex = { AddedNewSubscription: 0, PriceRequested: 1 };
  consts = { ErrorCodes: { InvalidCaller: BigInt(1) } };

  at(address: string): OracleOperatorInstance {
    return new OracleOperatorInstance(address);
  }

  tests = {
    setNewManager: async (
      params: TestContractParams<
        OracleOperatorTypes.Fields,
        { newManager: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setNewManager", params);
    },
    getManager: async (
      params: Omit<
        TestContractParams<OracleOperatorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getManager", params);
    },
    getPublicKey: async (
      params: Omit<
        TestContractParams<OracleOperatorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getPublicKey", params);
    },
    getFees: async (
      params: Omit<
        TestContractParams<OracleOperatorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getFees", params);
    },
    newPriceRequest: async (
      params: TestContractParams<
        OracleOperatorTypes.Fields,
        { from: HexString; to: HexString; contractId: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "newPriceRequest", params);
    },
    updateFees: async (
      params: TestContractParams<
        OracleOperatorTypes.Fields,
        { newFees: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateFees", params);
    },
    deployNewSubscription: async (
      params: Omit<
        TestContractParams<OracleOperatorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "deployNewSubscription", params);
    },
  };
}

// Use this object to test and deploy the contract
export const OracleOperator = new Factory(
  Contract.fromJson(
    OracleOperatorContractJson,
    "",
    "77b91eba3bf58081f81c73ddf2a8f86fed041df25ec13e55447d138001c34083"
  )
);

// Use this class to interact with the blockchain
export class OracleOperatorInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<OracleOperatorTypes.State> {
    return fetchContractState(OracleOperator, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAddedNewSubscriptionEvent(
    options: EventSubscribeOptions<OracleOperatorTypes.AddedNewSubscriptionEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      OracleOperator.contract,
      this,
      options,
      "AddedNewSubscription",
      fromCount
    );
  }

  subscribePriceRequestedEvent(
    options: EventSubscribeOptions<OracleOperatorTypes.PriceRequestedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      OracleOperator.contract,
      this,
      options,
      "PriceRequested",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | OracleOperatorTypes.AddedNewSubscriptionEvent
      | OracleOperatorTypes.PriceRequestedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      OracleOperator.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getManager: async (
      params?: OracleOperatorTypes.CallMethodParams<"getManager">
    ): Promise<OracleOperatorTypes.CallMethodResult<"getManager">> => {
      return callMethod(
        OracleOperator,
        this,
        "getManager",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPublicKey: async (
      params?: OracleOperatorTypes.CallMethodParams<"getPublicKey">
    ): Promise<OracleOperatorTypes.CallMethodResult<"getPublicKey">> => {
      return callMethod(
        OracleOperator,
        this,
        "getPublicKey",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getFees: async (
      params?: OracleOperatorTypes.CallMethodParams<"getFees">
    ): Promise<OracleOperatorTypes.CallMethodResult<"getFees">> => {
      return callMethod(
        OracleOperator,
        this,
        "getFees",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends OracleOperatorTypes.MultiCallParams>(
    calls: Calls
  ): Promise<OracleOperatorTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      OracleOperator,
      this,
      calls,
      getContractByCodeHash
    )) as OracleOperatorTypes.MultiCallResults<Calls>;
  }
}
