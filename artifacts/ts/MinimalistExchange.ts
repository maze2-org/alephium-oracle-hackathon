/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as MinimalistExchangeContractJson } from "../usage-example/MinimalistExchange.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace MinimalistExchangeTypes {
  export type Fields = {
    owner: Address;
    alphPriceInUsd: bigint;
    subscriptionContractId: HexString;
    priceRequestContractId: HexString;
  };

  export type State = ContractState<Fields>;

  export type AlphPriceUpdatedEvent = ContractEvent<{ newPrice: bigint }>;

  export interface CallMethodTable {
    getAlphPriceInUsd: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  MinimalistExchangeInstance,
  MinimalistExchangeTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as MinimalistExchangeTypes.Fields;
  }

  eventIndex = { AlphPriceUpdated: 0 };
  consts = {
    ErrorCodes: {
      InvalidCaller: BigInt(1),
      OracleDoesntExist: BigInt(2),
      PriceRequestDoesntExist: BigInt(4),
    },
  };

  at(address: string): MinimalistExchangeInstance {
    return new MinimalistExchangeInstance(address);
  }

  tests = {
    setNewOwner: async (
      params: TestContractParams<
        MinimalistExchangeTypes.Fields,
        { newOwner: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setNewOwner", params);
    },
    setNewsubScriptionContractId: async (
      params: TestContractParams<
        MinimalistExchangeTypes.Fields,
        { newSubscriptionContractId: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setNewsubScriptionContractId", params);
    },
    getAlphPriceInUsd: async (
      params: Omit<
        TestContractParams<MinimalistExchangeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAlphPriceInUsd", params);
    },
    getOracleSubscription: async (
      params: Omit<
        TestContractParams<MinimalistExchangeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getOracleSubscription", params);
    },
    getPriceRequest: async (
      params: Omit<
        TestContractParams<MinimalistExchangeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getPriceRequest", params);
    },
    fetchPrice: async (
      params: Omit<
        TestContractParams<MinimalistExchangeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "fetchPrice", params);
    },
    completeFetchProcess: async (
      params: Omit<
        TestContractParams<MinimalistExchangeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "completeFetchProcess", params);
    },
  };
}

// Use this object to test and deploy the contract
export const MinimalistExchange = new Factory(
  Contract.fromJson(
    MinimalistExchangeContractJson,
    "=24-2+f9=1-3+18f=150+3=1-1=14+7e0316436f6d706172696e6720616464726573737365733a200120001600a000=14+1400a0031400a003417e040a436f6d706172696e6720022c20022c2000=164+a0037e020a526573756c742069732000=13-1+d=28+16007e021748616e646c696e6720707269636520726571756573742000=12+7e020c=1+6756c66696=1+6c6564203f20000c0d=1+60001004c187e0113507=1+696365207761732066756c66696c6c65640c0d160001027e0209616d6f6f756e743a2000=58",
    "18ace72ccc3f134f22cbf21b640177c7743f756796b6d067c9422bd6553c3ffc"
  )
);

// Use this class to interact with the blockchain
export class MinimalistExchangeInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MinimalistExchangeTypes.State> {
    return fetchContractState(MinimalistExchange, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAlphPriceUpdatedEvent(
    options: EventSubscribeOptions<MinimalistExchangeTypes.AlphPriceUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MinimalistExchange.contract,
      this,
      options,
      "AlphPriceUpdated",
      fromCount
    );
  }

  methods = {
    getAlphPriceInUsd: async (
      params?: MinimalistExchangeTypes.CallMethodParams<"getAlphPriceInUsd">
    ): Promise<
      MinimalistExchangeTypes.CallMethodResult<"getAlphPriceInUsd">
    > => {
      return callMethod(
        MinimalistExchange,
        this,
        "getAlphPriceInUsd",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends MinimalistExchangeTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MinimalistExchangeTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      MinimalistExchange,
      this,
      calls,
      getContractByCodeHash
    )) as MinimalistExchangeTypes.MultiCallResults<Calls>;
  }
}
