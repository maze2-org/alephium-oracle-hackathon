/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as OraclePriceRequestContractJson } from "../oracles/OraclePriceRequest.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace OraclePriceRequestTypes {
  export type Fields = {
    subscription: HexString;
    from: HexString;
    to: HexString;
    oracleFees: bigint;
    amount: bigint;
    decimals: bigint;
    fulfilled: boolean;
  };

  export type State = ContractState<Fields>;

  export type RequestFulfilledEvent = ContractEvent<{
    subscription: HexString;
    from: HexString;
    to: HexString;
    amount: bigint;
    fulfilled: boolean;
  }>;

  export interface CallMethodTable {
    getFulfilled: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getOracleFees: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    testDebug: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  OraclePriceRequestInstance,
  OraclePriceRequestTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as OraclePriceRequestTypes.Fields;
  }

  eventIndex = { RequestFulfilled: 0 };
  consts = { ErrorCodes: { InvalidCaller: BigInt(1) } };

  at(address: string): OraclePriceRequestInstance {
    return new OraclePriceRequestInstance(address);
  }

  tests = {
    getFulfilled: async (
      params: Omit<
        TestContractParams<OraclePriceRequestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<boolean>> => {
      return testMethod(this, "getFulfilled", params);
    },
    getOracleFees: async (
      params: Omit<
        TestContractParams<OraclePriceRequestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getOracleFees", params);
    },
    testDebug: async (
      params: Omit<
        TestContractParams<OraclePriceRequestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<boolean>> => {
      return testMethod(this, "testDebug", params);
    },
    getAmount: async (
      params: Omit<
        TestContractParams<OraclePriceRequestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAmount", params);
    },
    destroy: async (
      params: Omit<
        TestContractParams<OraclePriceRequestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
    fulfill: async (
      params: TestContractParams<
        OraclePriceRequestTypes.Fields,
        { lastKnownPrice: bigint; amountDecimals: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "fulfill", params);
    },
  };
}

// Use this object to test and deploy the contract
export const OraclePriceRequest = new Factory(
  Contract.fromJson(
    OraclePriceRequestContractJson,
    "=16-2+86=1-3+14f=80+17b20c=1+dc=1+0001017e030b44657374726f79696e6720182c2073656e64696e672066756e6473206261636b20746f2000b3ce007e030843616c6c65723a200b2073686f756c642062652000=50+35160016017e031b46756c66696c6c696e67=1+074686=1+20726571756573742e2e2e2c20022c2000=50+a002037e031246756c66696c6c6564207265717565737420022c2000=60+7e031c57696c6c2070617920746865206f7261636c65206d616e61676572200520666f72200620414c5048730c0d0c0dce00010501021602=2+7e010d46756e64732073656e742e2e2e",
    "4dc8119f620fd0d8268bf2f2e95027f88ad478bbf8742add475784fd1ad61978"
  )
);

// Use this class to interact with the blockchain
export class OraclePriceRequestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<OraclePriceRequestTypes.State> {
    return fetchContractState(OraclePriceRequest, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeRequestFulfilledEvent(
    options: EventSubscribeOptions<OraclePriceRequestTypes.RequestFulfilledEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      OraclePriceRequest.contract,
      this,
      options,
      "RequestFulfilled",
      fromCount
    );
  }

  methods = {
    getFulfilled: async (
      params?: OraclePriceRequestTypes.CallMethodParams<"getFulfilled">
    ): Promise<OraclePriceRequestTypes.CallMethodResult<"getFulfilled">> => {
      return callMethod(
        OraclePriceRequest,
        this,
        "getFulfilled",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOracleFees: async (
      params?: OraclePriceRequestTypes.CallMethodParams<"getOracleFees">
    ): Promise<OraclePriceRequestTypes.CallMethodResult<"getOracleFees">> => {
      return callMethod(
        OraclePriceRequest,
        this,
        "getOracleFees",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    testDebug: async (
      params?: OraclePriceRequestTypes.CallMethodParams<"testDebug">
    ): Promise<OraclePriceRequestTypes.CallMethodResult<"testDebug">> => {
      return callMethod(
        OraclePriceRequest,
        this,
        "testDebug",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmount: async (
      params?: OraclePriceRequestTypes.CallMethodParams<"getAmount">
    ): Promise<OraclePriceRequestTypes.CallMethodResult<"getAmount">> => {
      return callMethod(
        OraclePriceRequest,
        this,
        "getAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends OraclePriceRequestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<OraclePriceRequestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      OraclePriceRequest,
      this,
      calls,
      getContractByCodeHash
    )) as OraclePriceRequestTypes.MultiCallResults<Calls>;
  }
}
