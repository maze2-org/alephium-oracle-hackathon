/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as OraclePriceRequestContractJson } from "../oracles/OraclePriceRequest.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace OraclePriceRequestTypes {
  export type Fields = {
    subscription: HexString;
    from: HexString;
    to: HexString;
    amount: bigint;
    decimals: bigint;
    fulfilled: boolean;
  };

  export type State = ContractState<Fields>;

  export type RequestFulfilledEvent = ContractEvent<{
    subscription: HexString;
    from: HexString;
    to: HexString;
    amount: bigint;
    fulfilled: boolean;
  }>;

  export interface CallMethodTable {
    getFulfilled: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    testDebug: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  OraclePriceRequestInstance,
  OraclePriceRequestTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as OraclePriceRequestTypes.Fields;
  }

  eventIndex = { RequestFulfilled: 0 };
  consts = { ErrorCodes: { InvalidCaller: BigInt(1) } };

  at(address: string): OraclePriceRequestInstance {
    return new OraclePriceRequestInstance(address);
  }

  tests = {
    getFulfilled: async (
      params: Omit<
        TestContractParams<OraclePriceRequestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<boolean>> => {
      return testMethod(this, "getFulfilled", params);
    },
    testDebug: async (
      params: Omit<
        TestContractParams<OraclePriceRequestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<boolean>> => {
      return testMethod(this, "testDebug", params);
    },
    getAmount: async (
      params: Omit<
        TestContractParams<OraclePriceRequestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAmount", params);
    },
    destroy: async (
      params: Omit<
        TestContractParams<OraclePriceRequestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
    fulfill: async (
      params: TestContractParams<
        OraclePriceRequestTypes.Fields,
        { retrievedAmount: bigint; amountDecimals: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "fulfill", params);
    },
  };
}

// Use this object to test and deploy the contract
export const OraclePriceRequest = new Factory(
  Contract.fromJson(
    OraclePriceRequestContractJson,
    "=4+4=1-1+344067407040d24=1+4=1+0=1+0000000104=1+0027e02=2-2+2447455446554c46494c4c45444444444444444444444444444444=1+42=1+726=1+7475726=1+732000a00202=11-1+4=4+7e02402447455446554c46494c4c45444444444444444444444444444444442072657475726e73200003=14+a=1-1+000201=3+00=3+17b2=1+c=1+dce=5-2+17e=1+3=1+a446573746f79696e672=1+182c2=1+73656e64696e67=2+66756e647320626=1+636b2=1+746f=4+b3ce007e0308636=1+6c6c65723a2=2+b2=1-1+73686f756c642062652000=49+e160016017e031d46756c66696c6c696e6720746=1+6520726571756573742e2e2e2e2e2c20022c2000=50+a002037e031246756c66696c6c6564207265717565737420022c2000=24",
    "0725ea6e0d45ba8e5ef840192b780a902e958e16f4c62cb586ba1a8183125c94"
  )
);

// Use this class to interact with the blockchain
export class OraclePriceRequestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<OraclePriceRequestTypes.State> {
    return fetchContractState(OraclePriceRequest, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeRequestFulfilledEvent(
    options: EventSubscribeOptions<OraclePriceRequestTypes.RequestFulfilledEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      OraclePriceRequest.contract,
      this,
      options,
      "RequestFulfilled",
      fromCount
    );
  }

  methods = {
    getFulfilled: async (
      params?: OraclePriceRequestTypes.CallMethodParams<"getFulfilled">
    ): Promise<OraclePriceRequestTypes.CallMethodResult<"getFulfilled">> => {
      return callMethod(
        OraclePriceRequest,
        this,
        "getFulfilled",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    testDebug: async (
      params?: OraclePriceRequestTypes.CallMethodParams<"testDebug">
    ): Promise<OraclePriceRequestTypes.CallMethodResult<"testDebug">> => {
      return callMethod(
        OraclePriceRequest,
        this,
        "testDebug",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmount: async (
      params?: OraclePriceRequestTypes.CallMethodParams<"getAmount">
    ): Promise<OraclePriceRequestTypes.CallMethodResult<"getAmount">> => {
      return callMethod(
        OraclePriceRequest,
        this,
        "getAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends OraclePriceRequestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<OraclePriceRequestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      OraclePriceRequest,
      this,
      calls,
      getContractByCodeHash
    )) as OraclePriceRequestTypes.MultiCallResults<Calls>;
  }
}
