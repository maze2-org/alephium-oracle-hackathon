/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { RunScriptResult, DeployContractExecutionResult } from "@alephium/cli";
import { NetworkId } from "@alephium/web3";
import {
  OraclePriceRequest,
  OraclePriceRequestInstance,
  OracleSubscriptionAllowedConsumer,
  OracleSubscriptionAllowedConsumerInstance,
  OracleSubscription,
  OracleSubscriptionInstance,
  OracleOperator,
  OracleOperatorInstance,
  MinimalistExchange,
  MinimalistExchangeInstance,
} from ".";
import { default as devnetDeployments } from "../.deployments.devnet.json";

export type Deployments = {
  deployerAddress: string;
  contracts: {
    OraclePriceRequest: DeployContractExecutionResult<OraclePriceRequestInstance>;
    OracleSubscriptionAllowedConsumer: DeployContractExecutionResult<OracleSubscriptionAllowedConsumerInstance>;
    OracleSubscription: DeployContractExecutionResult<OracleSubscriptionInstance>;
    OracleOperator: DeployContractExecutionResult<OracleOperatorInstance>;
    MinimalistExchange: DeployContractExecutionResult<MinimalistExchangeInstance>;
  };
};

function toDeployments(json: any): Deployments {
  const contracts = {
    OraclePriceRequest: {
      ...json.contracts["OraclePriceRequest"],
      contractInstance: OraclePriceRequest.at(
        json.contracts["OraclePriceRequest"].contractInstance.address
      ),
    },
    OracleSubscriptionAllowedConsumer: {
      ...json.contracts["OracleSubscriptionAllowedConsumer"],
      contractInstance: OracleSubscriptionAllowedConsumer.at(
        json.contracts["OracleSubscriptionAllowedConsumer"].contractInstance
          .address
      ),
    },
    OracleSubscription: {
      ...json.contracts["OracleSubscription"],
      contractInstance: OracleSubscription.at(
        json.contracts["OracleSubscription"].contractInstance.address
      ),
    },
    OracleOperator: {
      ...json.contracts["OracleOperator"],
      contractInstance: OracleOperator.at(
        json.contracts["OracleOperator"].contractInstance.address
      ),
    },
    MinimalistExchange: {
      ...json.contracts["MinimalistExchange"],
      contractInstance: MinimalistExchange.at(
        json.contracts["MinimalistExchange"].contractInstance.address
      ),
    },
  };
  return {
    ...json,
    contracts: contracts as Deployments["contracts"],
  };
}

export function loadDeployments(
  networkId: NetworkId,
  deployerAddress?: string
): Deployments {
  const deployments = networkId === "devnet" ? devnetDeployments : undefined;
  if (deployments === undefined) {
    throw Error("The contract has not been deployed to the " + networkId);
  }
  const allDeployments = Array.isArray(deployments)
    ? deployments
    : [deployments];
  if (deployerAddress === undefined) {
    if (allDeployments.length > 1) {
      throw Error(
        "The contract has been deployed multiple times on " +
          networkId +
          ", please specify the deployer address"
      );
    } else {
      return toDeployments(allDeployments[0]);
    }
  }
  const result = allDeployments.find(
    (d) => d.deployerAddress === deployerAddress
  );
  if (result === undefined) {
    throw Error("The contract deployment result does not exist");
  }
  return toDeployments(result);
}
